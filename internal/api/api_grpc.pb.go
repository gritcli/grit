// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: github.com/gritcli/grit/internal/api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SourceAPIClient is the client API for SourceAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceAPIClient interface {
	// ListSources lists the configured repository sources.
	ListSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error)
}

type sourceAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceAPIClient(cc grpc.ClientConnInterface) SourceAPIClient {
	return &sourceAPIClient{cc}
}

func (c *sourceAPIClient) ListSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error) {
	out := new(ListSourcesResponse)
	err := c.cc.Invoke(ctx, "/grit.v2.api.SourceAPI/ListSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceAPIServer is the server API for SourceAPI service.
// All implementations should embed UnimplementedSourceAPIServer
// for forward compatibility
type SourceAPIServer interface {
	// ListSources lists the configured repository sources.
	ListSources(context.Context, *ListSourcesRequest) (*ListSourcesResponse, error)
}

// UnimplementedSourceAPIServer should be embedded to have forward compatible implementations.
type UnimplementedSourceAPIServer struct {
}

func (UnimplementedSourceAPIServer) ListSources(context.Context, *ListSourcesRequest) (*ListSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSources not implemented")
}

// UnsafeSourceAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourceAPIServer will
// result in compilation errors.
type UnsafeSourceAPIServer interface {
	mustEmbedUnimplementedSourceAPIServer()
}

func RegisterSourceAPIServer(s grpc.ServiceRegistrar, srv SourceAPIServer) {
	s.RegisterService(&SourceAPI_ServiceDesc, srv)
}

func _SourceAPI_ListSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceAPIServer).ListSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grit.v2.api.SourceAPI/ListSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceAPIServer).ListSources(ctx, req.(*ListSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SourceAPI_ServiceDesc is the grpc.ServiceDesc for SourceAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SourceAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grit.v2.api.SourceAPI",
	HandlerType: (*SourceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSources",
			Handler:    _SourceAPI_ListSources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/gritcli/grit/internal/api/api.proto",
}
