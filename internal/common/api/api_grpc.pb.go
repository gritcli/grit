// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: github.com/gritcli/grit/internal/common/api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	// Sources lists the configured repository sources.
	Sources(ctx context.Context, in *SourcesRequest, opts ...grpc.CallOption) (*SourcesResponse, error)
	// Resolve resolves repository name, URL or other identifier to a list of
	// candidate repositories.
	Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (API_ResolveClient, error)
	// Clone makes a local clone of a repository from a source.
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (API_CloneClient, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Sources(ctx context.Context, in *SourcesRequest, opts ...grpc.CallOption) (*SourcesResponse, error) {
	out := new(SourcesResponse)
	err := c.cc.Invoke(ctx, "/grit.v2.api.API/Sources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (API_ResolveClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[0], "/grit.v2.api.API/Resolve", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIResolveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ResolveClient interface {
	Recv() (*ResolveResponse, error)
	grpc.ClientStream
}

type aPIResolveClient struct {
	grpc.ClientStream
}

func (x *aPIResolveClient) Recv() (*ResolveResponse, error) {
	m := new(ResolveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (API_CloneClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[1], "/grit.v2.api.API/Clone", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPICloneClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_CloneClient interface {
	Recv() (*CloneResponse, error)
	grpc.ClientStream
}

type aPICloneClient struct {
	grpc.ClientStream
}

func (x *aPICloneClient) Recv() (*CloneResponse, error) {
	m := new(CloneResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
// All implementations should embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	// Sources lists the configured repository sources.
	Sources(context.Context, *SourcesRequest) (*SourcesResponse, error)
	// Resolve resolves repository name, URL or other identifier to a list of
	// candidate repositories.
	Resolve(*ResolveRequest, API_ResolveServer) error
	// Clone makes a local clone of a repository from a source.
	Clone(*CloneRequest, API_CloneServer) error
}

// UnimplementedAPIServer should be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) Sources(context.Context, *SourcesRequest) (*SourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sources not implemented")
}
func (UnimplementedAPIServer) Resolve(*ResolveRequest, API_ResolveServer) error {
	return status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (UnimplementedAPIServer) Clone(*CloneRequest, API_CloneServer) error {
	return status.Errorf(codes.Unimplemented, "method Clone not implemented")
}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_Sources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Sources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grit.v2.api.API/Sources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Sources(ctx, req.(*SourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Resolve_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResolveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Resolve(m, &aPIResolveServer{stream})
}

type API_ResolveServer interface {
	Send(*ResolveResponse) error
	grpc.ServerStream
}

type aPIResolveServer struct {
	grpc.ServerStream
}

func (x *aPIResolveServer) Send(m *ResolveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_Clone_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloneRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Clone(m, &aPICloneServer{stream})
}

type API_CloneServer interface {
	Send(*CloneResponse) error
	grpc.ServerStream
}

type aPICloneServer struct {
	grpc.ServerStream
}

func (x *aPICloneServer) Send(m *CloneResponse) error {
	return x.ServerStream.SendMsg(m)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grit.v2.api.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sources",
			Handler:    _API_Sources_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Resolve",
			Handler:       _API_Resolve_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Clone",
			Handler:       _API_Clone_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/gritcli/grit/internal/common/api/api.proto",
}
