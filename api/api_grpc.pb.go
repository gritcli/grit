// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: github.com/gritcli/grit/api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	API_DaemonInfo_FullMethodName   = "/grit.v2.api.API/DaemonInfo"
	API_ListSources_FullMethodName  = "/grit.v2.api.API/ListSources"
	API_ResolveRepo_FullMethodName  = "/grit.v2.api.API/ResolveRepo"
	API_CloneRepo_FullMethodName    = "/grit.v2.api.API/CloneRepo"
	API_SuggestRepos_FullMethodName = "/grit.v2.api.API/SuggestRepos"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	// DaemonInfo returns information about the daemon.
	DaemonInfo(ctx context.Context, in *DaemonInfoRequest, opts ...grpc.CallOption) (*DaemonInfoResponse, error)
	// ListSources lists the configured repository sources.
	ListSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error)
	// ResolveRepo resolves a repository name, URL or other identifier to a list
	// of repositories.
	ResolveRepo(ctx context.Context, in *ResolveRepoRequest, opts ...grpc.CallOption) (API_ResolveRepoClient, error)
	// CloneRepo makes a local clone of a repository from a source.
	CloneRepo(ctx context.Context, in *CloneRepoRequest, opts ...grpc.CallOption) (API_CloneRepoClient, error)
	// SuggestRepos returns a list of repository names to be used as suggestions
	// for completing a partial repository name.
	SuggestRepos(ctx context.Context, in *SuggestReposRequest, opts ...grpc.CallOption) (*SuggestResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) DaemonInfo(ctx context.Context, in *DaemonInfoRequest, opts ...grpc.CallOption) (*DaemonInfoResponse, error) {
	out := new(DaemonInfoResponse)
	err := c.cc.Invoke(ctx, API_DaemonInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error) {
	out := new(ListSourcesResponse)
	err := c.cc.Invoke(ctx, API_ListSources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ResolveRepo(ctx context.Context, in *ResolveRepoRequest, opts ...grpc.CallOption) (API_ResolveRepoClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[0], API_ResolveRepo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIResolveRepoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ResolveRepoClient interface {
	Recv() (*ResolveRepoResponse, error)
	grpc.ClientStream
}

type aPIResolveRepoClient struct {
	grpc.ClientStream
}

func (x *aPIResolveRepoClient) Recv() (*ResolveRepoResponse, error) {
	m := new(ResolveRepoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) CloneRepo(ctx context.Context, in *CloneRepoRequest, opts ...grpc.CallOption) (API_CloneRepoClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[1], API_CloneRepo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &aPICloneRepoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_CloneRepoClient interface {
	Recv() (*CloneRepoResponse, error)
	grpc.ClientStream
}

type aPICloneRepoClient struct {
	grpc.ClientStream
}

func (x *aPICloneRepoClient) Recv() (*CloneRepoResponse, error) {
	m := new(CloneRepoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) SuggestRepos(ctx context.Context, in *SuggestReposRequest, opts ...grpc.CallOption) (*SuggestResponse, error) {
	out := new(SuggestResponse)
	err := c.cc.Invoke(ctx, API_SuggestRepos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations should embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	// DaemonInfo returns information about the daemon.
	DaemonInfo(context.Context, *DaemonInfoRequest) (*DaemonInfoResponse, error)
	// ListSources lists the configured repository sources.
	ListSources(context.Context, *ListSourcesRequest) (*ListSourcesResponse, error)
	// ResolveRepo resolves a repository name, URL or other identifier to a list
	// of repositories.
	ResolveRepo(*ResolveRepoRequest, API_ResolveRepoServer) error
	// CloneRepo makes a local clone of a repository from a source.
	CloneRepo(*CloneRepoRequest, API_CloneRepoServer) error
	// SuggestRepos returns a list of repository names to be used as suggestions
	// for completing a partial repository name.
	SuggestRepos(context.Context, *SuggestReposRequest) (*SuggestResponse, error)
}

// UnimplementedAPIServer should be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) DaemonInfo(context.Context, *DaemonInfoRequest) (*DaemonInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DaemonInfo not implemented")
}
func (UnimplementedAPIServer) ListSources(context.Context, *ListSourcesRequest) (*ListSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSources not implemented")
}
func (UnimplementedAPIServer) ResolveRepo(*ResolveRepoRequest, API_ResolveRepoServer) error {
	return status.Errorf(codes.Unimplemented, "method ResolveRepo not implemented")
}
func (UnimplementedAPIServer) CloneRepo(*CloneRepoRequest, API_CloneRepoServer) error {
	return status.Errorf(codes.Unimplemented, "method CloneRepo not implemented")
}
func (UnimplementedAPIServer) SuggestRepos(context.Context, *SuggestReposRequest) (*SuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestRepos not implemented")
}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_DaemonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaemonInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DaemonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DaemonInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DaemonInfo(ctx, req.(*DaemonInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListSources(ctx, req.(*ListSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ResolveRepo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResolveRepoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).ResolveRepo(m, &aPIResolveRepoServer{stream})
}

type API_ResolveRepoServer interface {
	Send(*ResolveRepoResponse) error
	grpc.ServerStream
}

type aPIResolveRepoServer struct {
	grpc.ServerStream
}

func (x *aPIResolveRepoServer) Send(m *ResolveRepoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_CloneRepo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloneRepoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).CloneRepo(m, &aPICloneRepoServer{stream})
}

type API_CloneRepoServer interface {
	Send(*CloneRepoResponse) error
	grpc.ServerStream
}

type aPICloneRepoServer struct {
	grpc.ServerStream
}

func (x *aPICloneRepoServer) Send(m *CloneRepoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_SuggestRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestReposRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SuggestRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_SuggestRepos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SuggestRepos(ctx, req.(*SuggestReposRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grit.v2.api.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DaemonInfo",
			Handler:    _API_DaemonInfo_Handler,
		},
		{
			MethodName: "ListSources",
			Handler:    _API_ListSources_Handler,
		},
		{
			MethodName: "SuggestRepos",
			Handler:    _API_SuggestRepos_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ResolveRepo",
			Handler:       _API_ResolveRepo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CloneRepo",
			Handler:       _API_CloneRepo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/gritcli/grit/api/api.proto",
}
