syntax = "proto3";
package grit.v2.api;

option go_package = "github.com/gritcli/grit/api";

service API {
    // ListSources lists the configured repository sources.
    rpc ListSources(ListSourcesRequest) returns (ListSourcesResponse);

    // ResolveLocalRepo resolves repository name, URL or other identifier to a
    // list if local repository clones.
    rpc ResolveLocalRepo(ResolveLocalRepoRequest) returns (stream ResolveLocalRepoResponse);

    // ResolveRemoteRepo resolves repository name, URL or other identifier to a
    // list of remote repositories.
    rpc ResolveRemoteRepo(ResolveRemoteRepoRequest) returns (stream ResolveRemoteRepoResponse);

    // CloneRemoteRepo makes a local clone of a repository from a source.
    rpc CloneRemoteRepo(CloneRemoteRepoRequest) returns (stream CloneRemoteRepoResponse);

    // SuggestRepos returns a list of repository names to be used as suggestions
    // for completing a partial repository name.
    rpc SuggestRepos(SuggestReposRequest) returns (SuggestResponse);
}

message ListSourcesRequest {
}

message ListSourcesResponse {
    repeated Source sources = 1;
}

message Source {
    string name = 1;
    string description = 2;
    string status = 3;
    string base_clone_dir = 4;
}

message RemoteRepo {
    string id = 1;
    string source = 2;
    string name = 3;
    string description = 4;
    string web_url = 5;
}

message LocalRepo
{
    RemoteRepo remote_repo = 1;
    string absolute_clone_dir = 2;
}

message ClientOptions {
    bool capture_debug_log = 1;
}

message ClientOutput {
    string message = 1;
    bool is_debug = 2;
}

message ResolveLocalRepoRequest {
    ClientOptions client_options = 1;
    string query = 2;
}

message ResolveLocalRepoResponse {
    oneof response {
        ClientOutput output = 1;
        LocalRepo local_repo = 2;
    }
}

message ResolveRemoteRepoRequest {
    ClientOptions client_options = 1;
    string query = 2;
}

message ResolveRemoteRepoResponse {
    oneof response {
        ClientOutput output = 1;
        RemoteRepo remote_repo = 2;
    }
}

message CloneRemoteRepoRequest {
    ClientOptions client_options = 1;
    string source = 2;
    string repo_id = 3;
}

message CloneRemoteRepoResponse {
    oneof response {
        ClientOutput output = 1;
        LocalRepo local_repo = 2;
    }
}

enum SuggestReposFilter {
    SUGGEST_ANY = 0;
    SUGGEST_LOCAL_ONLY = 1;
    SUGGEST_REMOTE_ONLY = 2;
}

message SuggestReposRequest {
    string word = 1;
    SuggestReposFilter filter = 2;
}

message SuggestResponse {
    repeated string words = 1;
}
